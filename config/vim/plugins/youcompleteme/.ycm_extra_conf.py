
import os
import json
import ycm_core


cxx_flags = [ '-Wall', "-std=c++11", "-x", "c++" ]
c11_flags = [ '-Wall', "-std=c11", "-x", "c" ]

compilation_database_folder = ''


SOURCE_EXTENSIONS = [ '.c', '.cpp', '.cxx', '.cc', '.m', '.mm' ]
HEADER_EXTENSIONS = [ '.h', '.hpp', '.hxx', '.hh' ]


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetDataBase():
    database_folder = compilation_database_folder
    if database_folder == '':
        database_folder = os.path.dirname(__file__)
    commands_json = os.path.join(database_folder, "compile_commands.json")
    if os.path.exists(commands_json):
        database = ycm_core.CompilationDatabase(database_folder)
    else:
        database = None
    header_json = os.path.join(database_folder, "header.json")
    if os.path.exists(header_json):
        with open(header_json) as f:
            header = json.load(f)
    else:
        header = None
    return database, header

database, header = GetDataBase()


def DirectoryOfThisScript():
    return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]

    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag): ]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)

    return new_flags


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        if filename in header:
            return database.GetCompilationInfoForFile(header[filename])
    return database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if compilation_info:
            final_flags = MakeRelativePathsInFlagsAbsolute(
                compilation_info.compiler_flags_,
                compilation_info.compiler_working_dir_ )
            return { 'flags': final_flags, 'do_cache': True }

    if os.path.splitext(filename)[1] == '.c':
        flags = c11_flags
    else:
        flags = cxx_flags
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)

    return { 'flags': final_flags, 'do_cache': True }

